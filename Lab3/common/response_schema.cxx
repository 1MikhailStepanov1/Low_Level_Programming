// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "response_schema.hxx"

// filling_t
// 

const filling_t::type_type& filling_t::
type () const
{
  return this->type_.get ();
}

filling_t::type_type& filling_t::
type ()
{
  return this->type_.get ();
}

void filling_t::
type (const type_type& x)
{
  this->type_.set (x);
}

void filling_t::
type (::std::unique_ptr< type_type > x)
{
  this->type_.set (std::move (x));
}

const filling_t::value_type& filling_t::
value () const
{
  return this->value_.get ();
}

filling_t::value_type& filling_t::
value ()
{
  return this->value_.get ();
}

void filling_t::
value (const value_type& x)
{
  this->value_.set (x);
}

void filling_t::
value (::std::unique_ptr< value_type > x)
{
  this->value_.set (std::move (x));
}


// node_t
// 

const node_t::node_name_type& node_t::
node_name () const
{
  return this->node_name_.get ();
}

node_t::node_name_type& node_t::
node_name ()
{
  return this->node_name_.get ();
}

void node_t::
node_name (const node_name_type& x)
{
  this->node_name_.set (x);
}

void node_t::
node_name (::std::unique_ptr< node_name_type > x)
{
  this->node_name_.set (std::move (x));
}

const node_t::node_class_type& node_t::
node_class () const
{
  return this->node_class_.get ();
}

node_t::node_class_type& node_t::
node_class ()
{
  return this->node_class_.get ();
}

void node_t::
node_class (const node_class_type& x)
{
  this->node_class_.set (x);
}

void node_t::
node_class (::std::unique_ptr< node_class_type > x)
{
  this->node_class_.set (std::move (x));
}

const node_t::field_sequence& node_t::
field () const
{
  return this->field_;
}

node_t::field_sequence& node_t::
field ()
{
  return this->field_;
}

void node_t::
field (const field_sequence& s)
{
  this->field_ = s;
}

const node_t::relation_sequence& node_t::
relation () const
{
  return this->relation_;
}

node_t::relation_sequence& node_t::
relation ()
{
  return this->relation_;
}

void node_t::
relation (const relation_sequence& s)
{
  this->relation_ = s;
}


// body_t
// 

const body_t::node_sequence& body_t::
node () const
{
  return this->node_;
}

body_t::node_sequence& body_t::
node ()
{
  return this->node_;
}

void body_t::
node (const node_sequence& s)
{
  this->node_ = s;
}


// response_t
// 

const response_t::status_type& response_t::
status () const
{
  return this->status_.get ();
}

response_t::status_type& response_t::
status ()
{
  return this->status_.get ();
}

void response_t::
status (const status_type& x)
{
  this->status_.set (x);
}

const response_t::message_type& response_t::
message () const
{
  return this->message_.get ();
}

response_t::message_type& response_t::
message ()
{
  return this->message_.get ();
}

void response_t::
message (const message_type& x)
{
  this->message_.set (x);
}

void response_t::
message (::std::unique_ptr< message_type > x)
{
  this->message_.set (std::move (x));
}

const response_t::isFinished_type& response_t::
isFinished () const
{
  return this->isFinished_.get ();
}

response_t::isFinished_type& response_t::
isFinished ()
{
  return this->isFinished_.get ();
}

void response_t::
isFinished (const isFinished_type& x)
{
  this->isFinished_.set (x);
}

const response_t::body_optional& response_t::
body () const
{
  return this->body_;
}

response_t::body_optional& response_t::
body ()
{
  return this->body_;
}

void response_t::
body (const body_type& x)
{
  this->body_.set (x);
}

void response_t::
body (const body_optional& x)
{
  this->body_ = x;
}

void response_t::
body (::std::unique_ptr< body_type > x)
{
  this->body_.set (std::move (x));
}


#include <xsd/cxx/xml/dom/parsing-source.hxx>

// filling_t
//

filling_t::
filling_t (const type_type& type,
           const value_type& value)
: ::xml_schema::type (),
  type_ (type, this),
  value_ (value, this)
{
}

filling_t::
filling_t (const filling_t& x,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  type_ (x.type_, f, this),
  value_ (x.value_, f, this)
{
}

filling_t::
filling_t (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  type_ (this),
  value_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void filling_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // type
    //
    if (n.name () == "type" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< type_type > r (
        type_traits::create (i, f, this));

      if (!type_.present ())
      {
        this->type_.set (::std::move (r));
        continue;
      }
    }

    // value
    //
    if (n.name () == "value" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< value_type > r (
        value_traits::create (i, f, this));

      if (!value_.present ())
      {
        this->value_.set (::std::move (r));
        continue;
      }
    }

    break;
  }

  if (!type_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "type",
      "");
  }

  if (!value_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "value",
      "");
  }
}

filling_t* filling_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class filling_t (*this, f, c);
}

filling_t& filling_t::
operator= (const filling_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->type_ = x.type_;
    this->value_ = x.value_;
  }

  return *this;
}

filling_t::
~filling_t ()
{
}

// node_t
//

node_t::
node_t (const node_name_type& node_name,
        const node_class_type& node_class)
: ::xml_schema::type (),
  node_name_ (node_name, this),
  node_class_ (node_class, this),
  field_ (this),
  relation_ (this)
{
}

node_t::
node_t (const node_t& x,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  node_name_ (x.node_name_, f, this),
  node_class_ (x.node_class_, f, this),
  field_ (x.field_, f, this),
  relation_ (x.relation_, f, this)
{
}

node_t::
node_t (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  node_name_ (this),
  node_class_ (this),
  field_ (this),
  relation_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void node_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // node_name
    //
    if (n.name () == "node_name" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< node_name_type > r (
        node_name_traits::create (i, f, this));

      if (!node_name_.present ())
      {
        this->node_name_.set (::std::move (r));
        continue;
      }
    }

    // node_class
    //
    if (n.name () == "node_class" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< node_class_type > r (
        node_class_traits::create (i, f, this));

      if (!node_class_.present ())
      {
        this->node_class_.set (::std::move (r));
        continue;
      }
    }

    // field
    //
    if (n.name () == "field" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< field_type > r (
        field_traits::create (i, f, this));

      this->field_.push_back (::std::move (r));
      continue;
    }

    // relation
    //
    if (n.name () == "relation" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< relation_type > r (
        relation_traits::create (i, f, this));

      this->relation_.push_back (::std::move (r));
      continue;
    }

    break;
  }

  if (!node_name_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "node_name",
      "");
  }

  if (!node_class_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "node_class",
      "");
  }
}

node_t* node_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class node_t (*this, f, c);
}

node_t& node_t::
operator= (const node_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->node_name_ = x.node_name_;
    this->node_class_ = x.node_class_;
    this->field_ = x.field_;
    this->relation_ = x.relation_;
  }

  return *this;
}

node_t::
~node_t ()
{
}

// body_t
//

body_t::
body_t ()
: ::xml_schema::type (),
  node_ (this)
{
}

body_t::
body_t (const body_t& x,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  node_ (x.node_, f, this)
{
}

body_t::
body_t (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  node_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void body_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // node
    //
    if (n.name () == "node" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< node_type > r (
        node_traits::create (i, f, this));

      this->node_.push_back (::std::move (r));
      continue;
    }

    break;
  }
}

body_t* body_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class body_t (*this, f, c);
}

body_t& body_t::
operator= (const body_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->node_ = x.node_;
  }

  return *this;
}

body_t::
~body_t ()
{
}

// response_t
//

response_t::
response_t (const status_type& status,
            const message_type& message,
            const isFinished_type& isFinished)
: ::xml_schema::type (),
  status_ (status, this),
  message_ (message, this),
  isFinished_ (isFinished, this),
  body_ (this)
{
}

response_t::
response_t (const response_t& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  status_ (x.status_, f, this),
  message_ (x.message_, f, this),
  isFinished_ (x.isFinished_, f, this),
  body_ (x.body_, f, this)
{
}

response_t::
response_t (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  status_ (this),
  message_ (this),
  isFinished_ (this),
  body_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void response_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // status
    //
    if (n.name () == "status" && n.namespace_ ().empty ())
    {
      if (!status_.present ())
      {
        this->status_.set (status_traits::create (i, f, this));
        continue;
      }
    }

    // message
    //
    if (n.name () == "message" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< message_type > r (
        message_traits::create (i, f, this));

      if (!message_.present ())
      {
        this->message_.set (::std::move (r));
        continue;
      }
    }

    // isFinished
    //
    if (n.name () == "isFinished" && n.namespace_ ().empty ())
    {
      if (!isFinished_.present ())
      {
        this->isFinished_.set (isFinished_traits::create (i, f, this));
        continue;
      }
    }

    // body
    //
    if (n.name () == "body" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< body_type > r (
        body_traits::create (i, f, this));

      if (!this->body_)
      {
        this->body_.set (::std::move (r));
        continue;
      }
    }

    break;
  }

  if (!status_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "status",
      "");
  }

  if (!message_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "message",
      "");
  }

  if (!isFinished_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "isFinished",
      "");
  }
}

response_t* response_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class response_t (*this, f, c);
}

response_t& response_t::
operator= (const response_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->status_ = x.status_;
    this->message_ = x.message_;
    this->isFinished_ = x.isFinished_;
    this->body_ = x.body_;
  }

  return *this;
}

response_t::
~response_t ()
{
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::unique_ptr< ::response_t >
response (const ::std::string& u,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::unique_ptr< ::response_t > (
    ::response (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::response_t >
response (const ::std::string& u,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::response_t > (
    ::response (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::response_t >
response (const ::std::string& u,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::response_t > (
    ::response (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::response_t >
response (::std::istream& is,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::response (isrc, f, p);
}

::std::unique_ptr< ::response_t >
response (::std::istream& is,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::response (isrc, h, f, p);
}

::std::unique_ptr< ::response_t >
response (::std::istream& is,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::response (isrc, h, f, p);
}

::std::unique_ptr< ::response_t >
response (::std::istream& is,
          const ::std::string& sid,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::response (isrc, f, p);
}

::std::unique_ptr< ::response_t >
response (::std::istream& is,
          const ::std::string& sid,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::response (isrc, h, f, p);
}

::std::unique_ptr< ::response_t >
response (::std::istream& is,
          const ::std::string& sid,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::response (isrc, h, f, p);
}

::std::unique_ptr< ::response_t >
response (::xercesc::InputSource& i,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::unique_ptr< ::response_t > (
    ::response (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::response_t >
response (::xercesc::InputSource& i,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::response_t > (
    ::response (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::response_t >
response (::xercesc::InputSource& i,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::response_t > (
    ::response (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::response_t >
response (const ::xercesc::DOMDocument& doc,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

    return ::std::unique_ptr< ::response_t > (
      ::response (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "response" &&
      n.namespace_ () == "")
  {
    ::std::unique_ptr< ::response_t > r (
      ::xsd::cxx::tree::traits< ::response_t, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "response",
    "");
}

::std::unique_ptr< ::response_t >
response (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
          ::xml_schema::flags f,
          const ::xml_schema::properties&)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "response" &&
      n.namespace_ () == "")
  {
    ::std::unique_ptr< ::response_t > r (
      ::xsd::cxx::tree::traits< ::response_t, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "response",
    "");
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

void
operator<< (::xercesc::DOMElement& e, const filling_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // type
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "type",
        e));

    s << i.type ();
  }

  // value
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "value",
        e));

    s << i.value ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const node_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // node_name
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "node_name",
        e));

    s << i.node_name ();
  }

  // node_class
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "node_class",
        e));

    s << i.node_class ();
  }

  // field
  //
  for (node_t::field_const_iterator
       b (i.field ().begin ()), n (i.field ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "field",
        e));

    s << *b;
  }

  // relation
  //
  for (node_t::relation_const_iterator
       b (i.relation ().begin ()), n (i.relation ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "relation",
        e));

    s << *b;
  }
}

void
operator<< (::xercesc::DOMElement& e, const body_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // node
  //
  for (body_t::node_const_iterator
       b (i.node ().begin ()), n (i.node ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "node",
        e));

    s << *b;
  }
}

void
operator<< (::xercesc::DOMElement& e, const response_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // status
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "status",
        e));

    s << i.status ();
  }

  // message
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "message",
        e));

    s << i.message ();
  }

  // isFinished
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "isFinished",
        e));

    s << i.isFinished ();
  }

  // body
  //
  if (i.body ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "body",
        e));

    s << *i.body ();
  }
}

void
response (::std::ostream& o,
          const ::response_t& s,
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e,
          ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::response (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
response (::std::ostream& o,
          const ::response_t& s,
          ::xml_schema::error_handler& h,
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e,
          ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::response (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
response (::std::ostream& o,
          const ::response_t& s,
          ::xercesc::DOMErrorHandler& h,
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e,
          ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::response (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
response (::xercesc::XMLFormatTarget& t,
          const ::response_t& s,
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e,
          ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::response (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
response (::xercesc::XMLFormatTarget& t,
          const ::response_t& s,
          ::xml_schema::error_handler& h,
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e,
          ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::response (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
response (::xercesc::XMLFormatTarget& t,
          const ::response_t& s,
          ::xercesc::DOMErrorHandler& h,
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e,
          ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::response (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
response (::xercesc::DOMDocument& d,
          const ::response_t& s,
          ::xml_schema::flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "response" &&
      n.namespace_ () == "")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "response",
      "");
  }
}

::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
response (const ::response_t& s,
          const ::xml_schema::namespace_infomap& m,
          ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< char > (
      "response",
      "",
      m, f));

  ::response (*d, s, f);
  return d;
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

