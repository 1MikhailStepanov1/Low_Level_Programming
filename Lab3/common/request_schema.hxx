// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef REQUEST_SCHEMA_HXX
#define REQUEST_SCHEMA_HXX

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info< char > namespace_info;
  typedef ::xsd::cxx::xml::dom::namespace_infomap< char > namespace_infomap;
  typedef ::xsd::cxx::tree::list_stream< char > list_stream;
  typedef ::xsd::cxx::tree::as_double< double_ > as_double;
  typedef ::xsd::cxx::tree::as_decimal< decimal > as_decimal;
  typedef ::xsd::cxx::tree::facet facet;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::serialization< char > serialization;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::unique_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
class constant_t;
class logical_condition_t;
class argument_t;
class object_t;
class sub_operation_t;
class selection_set_t;
class result_set_t;
class request_t;

#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

class constant_t: public ::xml_schema::type
{
  public:
  // type
  //
  typedef ::xml_schema::string type_type;
  typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

  const type_type&
  type () const;

  type_type&
  type ();

  void
  type (const type_type& x);

  void
  type (::std::unique_ptr< type_type > p);

  // value
  //
  typedef ::xml_schema::string value_type;
  typedef ::xsd::cxx::tree::traits< value_type, char > value_traits;

  const value_type&
  value () const;

  value_type&
  value ();

  void
  value (const value_type& x);

  void
  value (::std::unique_ptr< value_type > p);

  // Constructors.
  //
  constant_t (const type_type&,
              const value_type&);

  constant_t (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  constant_t (const constant_t& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  virtual constant_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  constant_t&
  operator= (const constant_t& x);

  virtual 
  ~constant_t ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< type_type > type_;
  ::xsd::cxx::tree::one< value_type > value_;
};

class logical_condition_t: public ::xml_schema::type
{
  public:
  // logical_operation
  //
  typedef ::xml_schema::string logical_operation_type;
  typedef ::xsd::cxx::tree::traits< logical_operation_type, char > logical_operation_traits;

  const logical_operation_type&
  logical_operation () const;

  logical_operation_type&
  logical_operation ();

  void
  logical_operation (const logical_operation_type& x);

  void
  logical_operation (::std::unique_ptr< logical_operation_type > p);

  // field
  //
  typedef ::constant_t field_type;
  typedef ::xsd::cxx::tree::sequence< field_type > field_sequence;
  typedef field_sequence::iterator field_iterator;
  typedef field_sequence::const_iterator field_const_iterator;
  typedef ::xsd::cxx::tree::traits< field_type, char > field_traits;

  const field_sequence&
  field () const;

  field_sequence&
  field ();

  void
  field (const field_sequence& s);

  // condition
  //
  typedef ::logical_condition_t condition_type;
  typedef ::xsd::cxx::tree::optional< condition_type > condition_optional;
  typedef ::xsd::cxx::tree::traits< condition_type, char > condition_traits;

  const condition_optional&
  condition () const;

  condition_optional&
  condition ();

  void
  condition (const condition_type& x);

  void
  condition (const condition_optional& x);

  void
  condition (::std::unique_ptr< condition_type > p);

  // Constructors.
  //
  logical_condition_t (const logical_operation_type&);

  logical_condition_t (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

  logical_condition_t (const logical_condition_t& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

  virtual logical_condition_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  logical_condition_t&
  operator= (const logical_condition_t& x);

  virtual 
  ~logical_condition_t ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< logical_operation_type > logical_operation_;
  field_sequence field_;
  condition_optional condition_;
};

class argument_t: public ::xml_schema::type
{
  public:
  // field
  //
  typedef ::constant_t field_type;
  typedef ::xsd::cxx::tree::sequence< field_type > field_sequence;
  typedef field_sequence::iterator field_iterator;
  typedef field_sequence::const_iterator field_const_iterator;
  typedef ::xsd::cxx::tree::traits< field_type, char > field_traits;

  const field_sequence&
  field () const;

  field_sequence&
  field ();

  void
  field (const field_sequence& s);

  // logic_op
  //
  typedef ::logical_condition_t logic_op_type;
  typedef ::xsd::cxx::tree::sequence< logic_op_type > logic_op_sequence;
  typedef logic_op_sequence::iterator logic_op_iterator;
  typedef logic_op_sequence::const_iterator logic_op_const_iterator;
  typedef ::xsd::cxx::tree::traits< logic_op_type, char > logic_op_traits;

  const logic_op_sequence&
  logic_op () const;

  logic_op_sequence&
  logic_op ();

  void
  logic_op (const logic_op_sequence& s);

  // Constructors.
  //
  argument_t ();

  argument_t (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  argument_t (const argument_t& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  virtual argument_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  argument_t&
  operator= (const argument_t& x);

  virtual 
  ~argument_t ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  field_sequence field_;
  logic_op_sequence logic_op_;
};

class object_t: public ::xml_schema::type
{
  public:
  // obj_name
  //
  typedef ::xml_schema::string obj_name_type;
  typedef ::xsd::cxx::tree::traits< obj_name_type, char > obj_name_traits;

  const obj_name_type&
  obj_name () const;

  obj_name_type&
  obj_name ();

  void
  obj_name (const obj_name_type& x);

  void
  obj_name (::std::unique_ptr< obj_name_type > p);

  // field
  //
  typedef ::constant_t field_type;
  typedef ::xsd::cxx::tree::sequence< field_type > field_sequence;
  typedef field_sequence::iterator field_iterator;
  typedef field_sequence::const_iterator field_const_iterator;
  typedef ::xsd::cxx::tree::traits< field_type, char > field_traits;

  const field_sequence&
  field () const;

  field_sequence&
  field ();

  void
  field (const field_sequence& s);

  // relation
  //
  typedef ::constant_t relation_type;
  typedef ::xsd::cxx::tree::sequence< relation_type > relation_sequence;
  typedef relation_sequence::iterator relation_iterator;
  typedef relation_sequence::const_iterator relation_const_iterator;
  typedef ::xsd::cxx::tree::traits< relation_type, char > relation_traits;

  const relation_sequence&
  relation () const;

  relation_sequence&
  relation ();

  void
  relation (const relation_sequence& s);

  // Constructors.
  //
  object_t (const obj_name_type&);

  object_t (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  object_t (const object_t& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  virtual object_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  object_t&
  operator= (const object_t& x);

  virtual 
  ~object_t ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< obj_name_type > obj_name_;
  field_sequence field_;
  relation_sequence relation_;
};

class sub_operation_t: public ::xml_schema::type
{
  public:
  // sub_op_type
  //
  typedef ::xml_schema::string sub_op_type_type;
  typedef ::xsd::cxx::tree::traits< sub_op_type_type, char > sub_op_type_traits;

  const sub_op_type_type&
  sub_op_type () const;

  sub_op_type_type&
  sub_op_type ();

  void
  sub_op_type (const sub_op_type_type& x);

  void
  sub_op_type (::std::unique_ptr< sub_op_type_type > p);

  // field
  //
  typedef ::constant_t field_type;
  typedef ::xsd::cxx::tree::traits< field_type, char > field_traits;

  const field_type&
  field () const;

  field_type&
  field ();

  void
  field (const field_type& x);

  void
  field (::std::unique_ptr< field_type > p);

  // Constructors.
  //
  sub_operation_t (const sub_op_type_type&,
                   const field_type&);

  sub_operation_t (const sub_op_type_type&,
                   ::std::unique_ptr< field_type >);

  sub_operation_t (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  sub_operation_t (const sub_operation_t& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  virtual sub_operation_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  sub_operation_t&
  operator= (const sub_operation_t& x);

  virtual 
  ~sub_operation_t ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< sub_op_type_type > sub_op_type_;
  ::xsd::cxx::tree::one< field_type > field_;
};

class selection_set_t: public ::xml_schema::type
{
  public:
  // argument
  //
  typedef ::argument_t argument_type;
  typedef ::xsd::cxx::tree::sequence< argument_type > argument_sequence;
  typedef argument_sequence::iterator argument_iterator;
  typedef argument_sequence::const_iterator argument_const_iterator;
  typedef ::xsd::cxx::tree::traits< argument_type, char > argument_traits;

  const argument_sequence&
  argument () const;

  argument_sequence&
  argument ();

  void
  argument (const argument_sequence& s);

  // object
  //
  typedef ::object_t object_type;
  typedef ::xsd::cxx::tree::sequence< object_type > object_sequence;
  typedef object_sequence::iterator object_iterator;
  typedef object_sequence::const_iterator object_const_iterator;
  typedef ::xsd::cxx::tree::traits< object_type, char > object_traits;

  const object_sequence&
  object () const;

  object_sequence&
  object ();

  void
  object (const object_sequence& s);

  // sub_operations
  //
  typedef ::sub_operation_t sub_operations_type;
  typedef ::xsd::cxx::tree::sequence< sub_operations_type > sub_operations_sequence;
  typedef sub_operations_sequence::iterator sub_operations_iterator;
  typedef sub_operations_sequence::const_iterator sub_operations_const_iterator;
  typedef ::xsd::cxx::tree::traits< sub_operations_type, char > sub_operations_traits;

  const sub_operations_sequence&
  sub_operations () const;

  sub_operations_sequence&
  sub_operations ();

  void
  sub_operations (const sub_operations_sequence& s);

  // Constructors.
  //
  selection_set_t ();

  selection_set_t (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  selection_set_t (const selection_set_t& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  virtual selection_set_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  selection_set_t&
  operator= (const selection_set_t& x);

  virtual 
  ~selection_set_t ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  argument_sequence argument_;
  object_sequence object_;
  sub_operations_sequence sub_operations_;
};

class result_set_t: public ::xml_schema::type
{
  public:
  // field
  //
  typedef ::xml_schema::string field_type;
  typedef ::xsd::cxx::tree::sequence< field_type > field_sequence;
  typedef field_sequence::iterator field_iterator;
  typedef field_sequence::const_iterator field_const_iterator;
  typedef ::xsd::cxx::tree::traits< field_type, char > field_traits;

  const field_sequence&
  field () const;

  field_sequence&
  field ();

  void
  field (const field_sequence& s);

  // Constructors.
  //
  result_set_t ();

  result_set_t (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  result_set_t (const result_set_t& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  virtual result_set_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  result_set_t&
  operator= (const result_set_t& x);

  virtual 
  ~result_set_t ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  field_sequence field_;
};

class request_t: public ::xml_schema::type
{
  public:
  // query_type
  //
  typedef ::xml_schema::string query_type_type;
  typedef ::xsd::cxx::tree::traits< query_type_type, char > query_type_traits;

  const query_type_type&
  query_type () const;

  query_type_type&
  query_type ();

  void
  query_type (const query_type_type& x);

  void
  query_type (::std::unique_ptr< query_type_type > p);

  // class_type
  //
  typedef ::xml_schema::string class_type_type;
  typedef ::xsd::cxx::tree::traits< class_type_type, char > class_type_traits;

  const class_type_type&
  class_type () const;

  class_type_type&
  class_type ();

  void
  class_type (const class_type_type& x);

  void
  class_type (::std::unique_ptr< class_type_type > p);

  // selection_set
  //
  typedef ::selection_set_t selection_set_type;
  typedef ::xsd::cxx::tree::traits< selection_set_type, char > selection_set_traits;

  const selection_set_type&
  selection_set () const;

  selection_set_type&
  selection_set ();

  void
  selection_set (const selection_set_type& x);

  void
  selection_set (::std::unique_ptr< selection_set_type > p);

  // result_set
  //
  typedef ::result_set_t result_set_type;
  typedef ::xsd::cxx::tree::traits< result_set_type, char > result_set_traits;

  const result_set_type&
  result_set () const;

  result_set_type&
  result_set ();

  void
  result_set (const result_set_type& x);

  void
  result_set (::std::unique_ptr< result_set_type > p);

  // Constructors.
  //
  request_t (const query_type_type&,
             const class_type_type&,
             const selection_set_type&,
             const result_set_type&);

  request_t (const query_type_type&,
             const class_type_type&,
             ::std::unique_ptr< selection_set_type >,
             ::std::unique_ptr< result_set_type >);

  request_t (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  request_t (const request_t& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  virtual request_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  request_t&
  operator= (const request_t& x);

  virtual 
  ~request_t ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< query_type_type > query_type_;
  ::xsd::cxx::tree::one< class_type_type > class_type_;
  ::xsd::cxx::tree::one< selection_set_type > selection_set_;
  ::xsd::cxx::tree::one< result_set_type > result_set_;
};

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

// Parse a URI or a local file.
//

::std::unique_ptr< ::request_t >
request (const ::std::string& uri,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::request_t >
request (const ::std::string& uri,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::request_t >
request (const ::std::string& uri,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::unique_ptr< ::request_t >
request (::std::istream& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::request_t >
request (::std::istream& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::request_t >
request (::std::istream& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::request_t >
request (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::request_t >
request (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::request_t >
request (::std::istream& is,
         const ::std::string& id,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::unique_ptr< ::request_t >
request (::xercesc::InputSource& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::request_t >
request (::xercesc::InputSource& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::request_t >
request (::xercesc::InputSource& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::unique_ptr< ::request_t >
request (const ::xercesc::DOMDocument& d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::request_t >
request (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

void
operator<< (::xercesc::DOMElement&, const constant_t&);

void
operator<< (::xercesc::DOMElement&, const logical_condition_t&);

void
operator<< (::xercesc::DOMElement&, const argument_t&);

void
operator<< (::xercesc::DOMElement&, const object_t&);

void
operator<< (::xercesc::DOMElement&, const sub_operation_t&);

void
operator<< (::xercesc::DOMElement&, const selection_set_t&);

void
operator<< (::xercesc::DOMElement&, const result_set_t&);

void
operator<< (::xercesc::DOMElement&, const request_t&);

// Serialize to std::ostream.
//

void
request (::std::ostream& os,
         const ::request_t& x, 
         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::flags f = 0);

void
request (::std::ostream& os,
         const ::request_t& x, 
         ::xml_schema::error_handler& eh,
         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::flags f = 0);

void
request (::std::ostream& os,
         const ::request_t& x, 
         ::xercesc::DOMErrorHandler& eh,
         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::flags f = 0);

// Serialize to xercesc::XMLFormatTarget.
//

void
request (::xercesc::XMLFormatTarget& ft,
         const ::request_t& x, 
         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::flags f = 0);

void
request (::xercesc::XMLFormatTarget& ft,
         const ::request_t& x, 
         ::xml_schema::error_handler& eh,
         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::flags f = 0);

void
request (::xercesc::XMLFormatTarget& ft,
         const ::request_t& x, 
         ::xercesc::DOMErrorHandler& eh,
         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::flags f = 0);

// Serialize to an existing xercesc::DOMDocument.
//

void
request (::xercesc::DOMDocument& d,
         const ::request_t& x,
         ::xml_schema::flags f = 0);

// Serialize to a new xercesc::DOMDocument.
//

::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
request (const ::request_t& x, 
         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
         ::xml_schema::flags f = 0);

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // REQUEST_SCHEMA_HXX
